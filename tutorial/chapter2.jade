.step(data-title='Home Page', data-file='app/routes.php', data-highlight="14-17")
  :markdown
    ## Rendering the Home Page

    Our first route simply responds to an HTTP GET request to the root URL of our application.  It uses Laravel's View system to render a plain PHP template that will contain the HTML for our user interface.
.step(data-title="Home Template", data-file='app/views/home.php', data-highlight="27-43")
  :markdown
    ## The Home Page Template

    This file contains the HTML markup for our simple UI. It contains a few `link` tags to pull in CSS from [Twitter Bootstrap](http://getbootstrap.com) to make our page look a little nicer, plus some `script` tags to pull in our application logic, jQuery, and a jQuery plugin for styling phone number input fields. 

    In the highlighted section, we can see that we set up a form to accept the user's phone number.  The form doesn't have an `action` or `method` defined in markup, since we plan on submitting the form via JavaScript.

    Let's look at the JavaScript we use to submit the form.


.step(data-title='UI: Phone Field', data-file='public/app.js', data-highlight="3-8")
  :markdown
    ## Creating a Better Phone Input

    Immediately on the document ready event, we use [a jQuery plugin](https://github.com/Bluefieldscom/intl-tel-input) to create an input field that will validate phone numbers and help insert proper country codes for the phone number our user enters.

    This step is not strictly necessary, but validating a user's phone number input on the client side is generally a good idea.

.step(data-title='UI: AJAX Form', data-file='public/app.js', data-highlight='10-30')
  :markdown
    ## AJAX Form Submit

    Here, we are capturing the form's `submit` event, and sending an AJAX POST request to our Laravel application.

    On line 14, we prevent the browser from following its default submit behavior.  On line 17, we use jQuery's AJAX function to send an HTTP POST request to `/call` on our server, containing the phone number the user entered as a form-encoded POST parameter. When the request completes, we simply display an alert containing the message we get back, as JSON, from the server.

    That's pretty much it for the front-end - let's take a look at the PHP code that contains the logic behind the `/call` route.