.step(data-title='How it Works')
  :markdown
    ## How It Works

    Let's go over the steps necessary to implement click-to-call in our application:

    ![Click-to-call Diagram](//s3-us-west-2.amazonaws.com/deved/clicktocall.png)

    1. A website visitor wants to connect to your organization.  She submits a web form with her phone number to receive a call connecting her to your sales or support team. 

    1. Your web application receives the form submission.  An HTTP request is initiated from your application to Twilio to initiate an outbound call. 

    1. Twilio receives the request and initiates a call to the user's phone number.

    1. User receives the call.

    1. After the call connects, Twilio asks our application for [TwiML instructions](/docs/api/twiml). Our TwiML instructs Twilio to connect the user to our sales or support teams.

    ## What We Will Learn

    This How-To demonstrates initializing a call using the [Twilio REST API][rest] and creating TwiML call logic using the [Say][say] and [Dial][dial] verbs.

    Sound like a plan? Let's get started!

    [rest]: /docs/api/rest/
    [dial]: /docs/api/twiml/dial
    [say]: /docs/api/twiml/say
.step(data-title="Application Overview", data-file='app/routes.php')
  :markdown
    ## Our Laravel Application

    In this example, we're using the [Laravel framework](http://laravel.com) for PHP. If you're new to using Laravel, you might want to [check out this post on our developer blog](/blog/2014/09/getting-started-with-twilio-and-the-laravel-framework-for-php.html).

    For this application, all of our server-side logic will live in `routes.php`.  We will only need three routes, with the following jobs:

    * display the home page
    * handle the AJAX form submission from our UI
    * render TwiML instructions for an outbound call to our user

    We also have a PHP file in the `views` directory of the sample application that renders a simple HTML form for accepting a user's phone number, and a bit of JavaScript to help drive the UI.

    But before we can do any of that fun stuff, we need to configure our application with a Twilio number we can use to make outbound calls, plus our Twilio account credentials.  Let's see how we might do that in a Laravel application.


.step(data-title='Configuration', data-file='.env.php')
  :markdown
    ## Configuring our Application

    Laravel's [configuration systems](http://laravel.com/docs/4.2/configuration#environment-configuration) provide conventions for where and how your application's configuration will be loaded and exposed to your application.  The primary location for environment configuration is `.env.php` in the root directory of your Laravel application.

    If you have this example code locally, open `env.php`, and then edit this file with the appropriate values for your application.  Your account credentials can be [found on your dashboard](/user/account):

    * `TWILIO_ACCOUNT_SID` : Replace XXX with your account SID - this is like your username for the Twilio API
    * `TWILIO_AUTH_TOKEN` : Replace YYY with your auth token - this is like your password for the Twilio API
    * `TWILIO_NUMBER` : Replace +16128675309 with a Twilio number [from your account](/user/account/phone-numbers/incoming)

    As constituted, this configuration file will pull in system environment variables in a fashion suited for deployment on Heroku, or any other environment that supports system environment variables for configuration. Okay, now that our app is configured, let's move on to the code. We'll begin by showing how we render the home page for this application.