.step(data-title='Outbound Call', data-file='app/routes.php', data-highlight="19-50")
  :markdown
    ## Outbound Call Route

    Back on the server, we define a route that handles HTTP POST requests to the `/call` URL. This is the PHP code that we're calling via our AJAX request in the browser.
.step(data-title="Create Client", data-file='app/routes.php', data-highlight="29-34")
  :markdown
    ## Create an Authenticated Twilio REST API Client

    The [Twilio helper library for PHP](/docs/php/install) provides a simple interface for Twilio's REST API that takes care of making HTTP requests, authentication, and content negotiation.  Here, we create a new client using our account SID and auth token configured in `.env.php`.
.step(data-title='Make Call', data-file='app/routes.php', data-highlight="37-42")
  :markdown
    ## Place the Outbound Call

    Here, we use the REST API client make the phone call to our application's user.  As inputs, we provide a Twilio number we control in our account, the user's phone number which we got from the AJAX form submission, and a URL to our Internet-accessible Laravel application.

    The URL parameter is another route in our Laravel app that Twilio will request once our outbound call is connected.  This route should return XML in a format we call [TwiML](/docs/api/twiml) - TwiML tells Twilio how to drive an outbound call, or respond to an incoming call or message.

    Let's check out our TwiML generating route now.

.step(data-title='TwiML Route', data-file='app/routes.php', data-highlight='52-67')
  :markdown
    ## TwiML Route

    Here, we define a route called `/outbound` that will contain TwiML instructions for our call.  Ultimately, as you can see on lines 63-65, we will be returning XML as a response from this route.

    The Twilio library, however, provides us a helper class that might make building TwiML responses a bit easier.  Let's take a look at how to create and use one.
.step(data-title='TwiML Builder', data-file='app/routes.php', data-highlight='60-61')
  :markdown
    ## Using the TwiML Builder

    The [TwiML Builder Class](https://twilio-php.readthedocs.org/en/latest/#generating-twiml) allows us to programmatically generate TwiML responses that we can use in our route.  Here, we create a TwiML response object, and then use it to generate a [`Say` tag](/docs/api/twiml/say) in the TwiML response we send back.

    On the next line that's commented out, you can see how you would use the [`Dial` tag](/docs/api/twiml/dial) to forward the call to another number. This is a common click-to-call use case - your server-side code might at this point load a customer's data from a CMS, and maybe intelligently route the call to the right sales rep or support person.
.step(data-title='Finish')
  :markdown
    ## All Done
    Congrats! You just learned how to build a working Click-to-Call solution. To improve upon this you could add two-factor authentication to your app, or create an interactive survey to follow-up with your customer.

    Thanks for checking out this tutorial! If you have any feedback to share with us, we'd love to hear it. Tweet [@twilio](http://twitter.com/twilio) to let us know what you think.